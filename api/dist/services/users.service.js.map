{"version":3,"sources":["services/users.service.js"],"names":["service","console","log","secret","process","env","SECRET","auth","email","password","deferred","defer","authenticate","findOne","created_at","updated_at","err","user","compare","hash","then","res","resolve","token","sign","sub","_id","name","avatar","isAdmin","admin","reject","catch","e","message","promise","list","find","users","getById","findById","countUsers","count","create","userParam","createUser","hashSync","avatarRandom","ghIds","randNum","Math","floor","random","newUser","Date","save","update","findByIdAndUpdate","_delete","findByIdAndRemove","delete"],"mappings":"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","file":"users.service.js","sourcesContent":["import jwt from 'jsonwebtoken';\nimport bcrypt from 'bcryptjs';\nimport Q from 'q';\nimport { users as Users } from '../models/db-connection';\n\nconst service = {};\n\nconsole.log('Right before const secret!');\nconst secret = process.env.SECRET;\n\nconst auth = (email, password) => {\n  const deferred = Q.defer();\n\n  const authenticate = () => {\n    Users.findOne({ email }, { created_at: 0, updated_at: 0 }, (err, user) => {\n      bcrypt.compare(password, user.hash)\n      .then((res) => {\n        if (user && res) {\n          deferred.resolve({\n            token: jwt.sign({ sub: user._id }, secret),\n            name: user.name,\n            avatar: user.avatar,\n            isAdmin: user.admin });\n        }\n        if (!res) deferred.reject('Password incorrect!');\n        else deferred.resolve('Nothing to show here!');\n      })\n      .catch(e => deferred.reject(`${e.name} : ${e.message}`));\n      if (err) deferred.reject(`${err.name} : ${err.message}`);\n    });\n  };\n\n  Users.findOne({ email }, (err, user) => {\n    if (err) deferred.reject(`${err.name} : ${err.message}: ${err}`);\n    if (!user) deferred.reject(`E-mail ${email} not exist.`);\n    else authenticate();\n  });\n\n  return deferred.promise;\n};\n\nconst list = () => {\n  const deferred = Q.defer();\n\n  Users.find({}, { hash: 0, email: 0, avatar: 0 }, (err, users) => {\n    if (err) deferred.reject(`${err.name} : ${err.message}`);\n    if (users) deferred.resolve(users);\n    else deferred.resolve('Nothing to show here!');\n  });\n\n  return deferred.promise;\n};\n\nconst getById = (_id) => {\n  const deferred = Q.defer();\n\n  Users.findById(_id, { hash: 0, email: 0, avatar: 0 }, (err, user) => {\n    if (err) deferred.reject(`${err.name} : ${err.message}`);\n    if (user) deferred.resolve(user);\n    else deferred.resolve('Nothing to show here!');\n  });\n\n  return deferred.promise;\n};\n\nconst countUsers = () => {\n  const deferred = Q.defer();\n\n  Users.count({}, (err, count) => {\n    if (err) deferred.reject(`${err.name} : ${err.message}`);\n    if (count) deferred.resolve(count);\n    else deferred.resolve('Nothing to show here!');\n  });\n\n  return deferred.promise;\n};\n\nconst create = (userParam) => {\n  const deferred = Q.defer();\n\n  const createUser = () => {\n    userParam.hash = bcrypt.hashSync(userParam.password, 10);\n\n    if (!userParam.admin) userParam.admin = false;\n\n    const avatarRandom = () => {\n      const ghIds = [342215, 5755568, 499550];\n      const randNum = Math.floor((Math.random() * 3));\n      return `https://avatars0.githubusercontent.com/u/${ghIds[randNum]}?v=3&s=32`;\n    };\n\n    const newUser = new Users({\n      name: userParam.name,\n      email: userParam.email,\n      hash: userParam.hash,\n      admin: userParam.admin,\n      avatar: avatarRandom(),\n      created_at: new Date(),\n      updated_at: new Date() });\n\n    newUser.save((err) => {\n      if (err) deferred.reject(`${err.name} : ${err.message}`);\n      else deferred.resolve('Successful user creation.');\n    });\n  };\n\n  Users.findOne({ email: userParam.email }, (err, user) => {\n    if (user) deferred.reject(`E-mail ${userParam.email} is already taken.`);\n    if (err) deferred.reject(`${err.name} : ${err.message}: ${err}`);\n    else createUser();\n  });\n\n  return deferred.promise;\n};\n\nconst update = (_id, userParam) => {\n  const deferred = Q.defer();\n\n  userParam.updated_at = new Date();\n\n  if (userParam.password) userParam.hash = bcrypt.hashSync(userParam.password, 10);\n\n  Users.findByIdAndUpdate(_id, userParam, (err) => {\n    if (err) deferred.reject(`${err.name} : ${err.message}`);\n    else deferred.resolve('User has been updated.');\n  });\n\n  return deferred.promise;\n};\n\nconst _delete = (_id) => {\n  const deferred = Q.defer();\n\n  Users.findByIdAndRemove(_id, (err) => {\n    if (err) deferred.reject(`${err.name} : ${err.message}`);\n    else deferred.resolve('User has been deleted.');\n  });\n\n  return deferred.promise;\n};\n\nservice.auth = auth;\nservice.list = list;\nservice.count = countUsers;\nservice.getById = getById;\nservice.create = create;\nservice.update = update;\nservice.delete = _delete;\n\nexport default service;\n"]}